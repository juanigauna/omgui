{"version":3,"sources":["context/socket.js","config/index.js","screens/create-nick/index.js","screens/chat/index.js","App.js","index.js"],"names":["socket","socketio","connect","transports","SocketContext","React","createContext","CreateNickname","state","onlineCounter","updateState","props","sendNickname","event","preventDefault","nickname","trim","length","emit","this","on","data","success","alert","number","setState","className","style","margin","color","onSubmit","type","onChange","target","value","placeholder","Component","Chat","message","messages","room","scrolled","mate","sendMessage","id","scrollToEnd","checkScroll","e","content","top","scrollTop","scrollHeight","clientHeight","document","querySelector","scrollTo","participants","forEach","participant","onScroll","map","index","App","screen","field","context","contextType","ReactDOM","render","StrictMode","Provider","getElementById"],"mappings":"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","file":"static/js/main.50207867.chunk.js","sourcesContent":["import React from 'react'\nimport socketio from 'socket.io-client'\nimport { SOCKET_URL } from '../config'\n\nexport const socket = socketio.connect(SOCKET_URL, { transports: [\"websocket\"] })\nexport const SocketContext = React.createContext()","export const SOCKET_URL = 'https://omgui.herokuapp.com'","import React, { Component } from 'react'\n\nclass CreateNickname extends Component {\n    state = {\n        onlineCounter: 0\n    }\n    updateState = this.props.updateState\n    socket = this.props.socket\n\n    sendNickname = event => {\n        event.preventDefault()\n        if (this.props.state.nickname.trim().length > 0) {\n            this.socket.emit('nickname', this.props.state.nickname)\n        }\n    }\n\n    componentDidMount() {\n        this.socket.on('nickname-response', data => {\n            if (data.success) {\n                this.updateState('screen', 'chat')\n            } else {\n                alert('Nickname already exists!')\n            }\n        })\n        this.socket.on('online-counter', number => {\n            this.setState({ ...this.state, onlineCounter: number })\n        })\n    }\n\n    render() {\n        return (\n            <div className={'center-absolute'}>\n                <div className={'card card-body w-420'}>\n                    <h2 style={{ margin: '10px 0' }}>Create nickname</h2>\n                    <p style={{ margin: '10px 0', color: '#fff' }}>People online <b>{this.state.onlineCounter}</b></p>\n                    <form className={'form'} onSubmit={event => this.sendNickname(event)}>\n                        <input\n                            type={'text'}\n                            onChange={event => this.updateState('nickname', event.target.value)}\n                            placeholder={'Enter your nickname'}\n                        />\n                        <button>Send</button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CreateNickname","import React, { Component } from 'react'\n\n\n\nclass Chat extends Component {\n    state = {\n        message: '',\n        messages: [],\n        room: {},\n        scrolled: false,\n        mate: ''\n    }\n    updateState = this.props.updateState\n    socket = this.props.socket\n\n    sendMessage = event => {\n        event.preventDefault()\n        if (this.state.message.trim().length > 0) {\n            const data = {\n                room: this.state.room.id,\n                nickname: this.props.state.nickname,\n                message: this.state.message\n            }\n            this.socket.emit('new-message', data)\n            this.setState({ ...this.state, message: '', messages: [...this.state.messages, data] }, () => {\n                this.scrollToEnd()\n            })\n        }\n    }\n    checkScroll = (e) => {\n        let content = e.target,\n            top = content.scrollTop,\n            height = content.scrollHeight - content.clientHeight\n        if (height-top > 20) {\n            this.setState({ ...this.state, scrolled: true })\n        } else {\n            this.setState({ ...this.state, scrolled: false })\n        }\n    }\n    scrollToEnd = () => {\n        if (!this.state.scrolled) {\n            document.querySelector('#message-recipent').scrollTo(0, document.querySelector('#message-recipent').scrollHeight)\n        }\n    }\n    message = message => this.setState({ ...this.state, message })\n    componentDidMount() {\n        this.socket.emit('find-room', this.props.state.nickname)\n        this.socket.on('find-room-response', data => {\n            this.setState({ ...this.state, room: data })\n            data.participants.forEach(participant => {\n                if (this.props.state.nickname !== participant) {\n                    this.setState({ ...this.state, mate: participant })\n                }\n            })\n        })\n        this.socket.on('join', nickname => this.setState({ ...this.state, mate: nickname }))\n        this.socket.on('leave-mate', () => this.setState({ ...this.state, mate: '', messages: [] }))\n        this.socket.on('new-message', data => {\n            this.setState({ ...this.state, messages: [...this.state.messages, data] }, () => {\n                this.scrollToEnd()\n            })\n        })\n    }\n    render() {\n        return (\n            <div className={'chat-container'}>\n                <div className={'chat-content'}>\n                    <div className={'chat-header'}>\n                        <h1>{this.state.mate}</h1>\n                        {\n                            this.state.mate === '' \n                            &&\n                            <h4 className={'chat-status'}><span className={'spinner'}></span> Waiting for someone...</h4>\n                                \n                        }\n                    </div>\n                    <div\n                        id={'message-recipent'}\n                        className={'message-recipent'}\n                        onScroll={e => this.checkScroll(e)}\n                    >\n                        {\n                            this.state.messages.map((message, index) => (\n                                <p className={'message'} id={'message-' + index}><b>{message.nickname}</b> {message.message}</p>\n                            ))\n                        }\n                    </div>\n                    <form className={'message-box'} onSubmit={event => this.sendMessage(event)}>\n                        <input\n                            type={'text'}\n                            onChange={event => this.message(event.target.value)}\n                            placeholder={'Write something'}\n                            value={this.state.message}\n                        />\n                        <button>Send</button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Chat","import React, { Component } from 'react'\n\nimport { SocketContext } from './context/socket'\n\nimport Main from './screens/create-nick'\nimport Chat from './screens/chat'\n\nclass App extends Component {\n    static contextType = SocketContext\n    state = {\n        screen: 'main',\n        nickname: '',\n    }\n\n    updateState = (field, value) => this.setState({ ...this.state, [field]: value })\n\n    render() {\n        if (this.state.screen === 'main') {\n            return <Main state={this.state} updateState={this.updateState} socket={this.context} />\n        }\n        if (this.state.screen === 'chat') {\n            return <Chat state={this.state} updateState={this.updateState} socket={this.context} />\n        }\n    }\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport { socket, SocketContext } from './context/socket'\n\nReactDOM.render(\n    <React.StrictMode>\n        <SocketContext.Provider value={socket}>\n            <App />\n        </SocketContext.Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)"],"sourceRoot":""}