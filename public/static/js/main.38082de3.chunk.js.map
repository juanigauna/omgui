{"version":3,"sources":["context/socket.js","config/index.js","screens/create-nick/index.js","screens/chat/index.js","App.js","index.js"],"names":["socket","socketio","connect","transports","SocketContext","React","createContext","CreateNickname","updateState","props","sendNickname","event","preventDefault","state","nickname","trim","length","emit","this","on","data","success","alert","className","style","marginBottom","onSubmit","type","onChange","target","value","placeholder","Component","Chat","message","messages","room","scrolled","mate","sendMessage","id","setState","scrollToEnd","checkScroll","e","content","top","scrollTop","scrollHeight","clientHeight","document","querySelector","scrollTo","participants","forEach","participant","name","onScroll","map","index","App","screen","field","context","contextType","ReactDOM","render","StrictMode","Provider","getElementById"],"mappings":"mMAIaA,E,OAASC,EAASC,QCJL,8BDIyB,CAAEC,WAAY,CAAC,eACrDC,EAAgBC,IAAMC,gB,OEqCpBC,E,4MAvCXC,YAAc,EAAKC,MAAMD,Y,EACzBR,OAAS,EAAKS,MAAMT,O,EAEpBU,aAAe,SAAAC,GACXA,EAAMC,iBACF,EAAKH,MAAMI,MAAMC,SAASC,OAAOC,OAAS,GAC1C,EAAKhB,OAAOiB,KAAK,WAAY,EAAKR,MAAMI,MAAMC,W,uDAItD,WAAqB,IAAD,OAChBI,KAAKlB,OAAOmB,GAAG,qBAAqB,SAAAC,GAC5BA,EAAKC,QACL,EAAKb,YAAY,SAAU,QAE3Bc,MAAM,iC,oBAKlB,WAAU,IAAD,OACL,OACI,qBAAKC,UAAW,kBAAhB,SACI,sBAAKA,UAAW,uBAAhB,UACI,oBAAIC,MAAO,CAACC,aAAc,QAA1B,6BACA,uBAAMF,UAAW,OAAQG,SAAU,SAAAf,GAAK,OAAI,EAAKD,aAAaC,IAA9D,UACI,uBACIgB,KAAM,OACNC,SAAU,SAAAjB,GAAK,OAAI,EAAKH,YAAY,WAAYG,EAAMkB,OAAOC,QAC7DC,YAAa,wBAEjB,sD,GAhCKC,a,QCmGdC,E,4MAhGXpB,MAAQ,CACJqB,QAAS,GACTC,SAAU,GACVC,KAAM,GACNC,UAAU,EACVC,KAAM,I,EAEV9B,YAAc,EAAKC,MAAMD,Y,EACzBR,OAAS,EAAKS,MAAMT,O,EAEpBuC,YAAc,SAAA5B,GAEV,GADAA,EAAMC,iBACF,EAAKC,MAAMqB,QAAQnB,OAAOC,OAAS,EAAG,CACtC,IAAMI,EAAO,CACTgB,KAAM,EAAKvB,MAAMuB,KAAKI,GACtB1B,SAAU,EAAKL,MAAMI,MAAMC,SAC3BoB,QAAS,EAAKrB,MAAMqB,SAExB,EAAKlC,OAAOiB,KAAK,cAAeG,GAChC,EAAKqB,SAAL,2BAAmB,EAAK5B,OAAxB,IAA+BqB,QAAS,GAAIC,SAAS,GAAD,mBAAM,EAAKtB,MAAMsB,UAAjB,CAA2Bf,OAAS,WACpF,EAAKsB,mB,EAIjBC,YAAc,SAACC,GACX,IAAIC,EAAUD,EAAEf,OACZiB,EAAMD,EAAQE,UACLF,EAAQG,aAAeH,EAAQI,aACjCH,EAAM,GACb,EAAKL,SAAL,2BAAmB,EAAK5B,OAAxB,IAA+BwB,UAAU,KAEzC,EAAKI,SAAL,2BAAmB,EAAK5B,OAAxB,IAA+BwB,UAAU,M,EAGjDK,YAAc,WACL,EAAK7B,MAAMwB,UACZa,SAASC,cAAc,qBAAqBC,SAAS,EAAGF,SAASC,cAAc,qBAAqBH,e,EAG5Gd,QAAU,SAAAA,GAAO,OAAI,EAAKO,SAAL,2BAAmB,EAAK5B,OAAxB,IAA+BqB,c,uDACpD,WAAqB,IAAD,OAChBhB,KAAKlB,OAAOiB,KAAK,YAAaC,KAAKT,MAAMI,MAAMC,UAC/CI,KAAKlB,OAAOmB,GAAG,sBAAsB,SAAAC,GACjC,EAAKqB,SAAL,2BAAmB,EAAK5B,OAAxB,IAA+BuB,KAAMhB,KACrCA,EAAKiC,aAAaC,SAAQ,SAAAC,GAClB,EAAK9C,MAAMI,MAAMC,WAAayC,GAC9B,EAAKd,SAAL,2BAAmB,EAAK5B,OAAxB,IAA+ByB,KAAMiB,WAIjDrC,KAAKlB,OAAOmB,GAAG,YAAY,SAAAL,GAAQ,OAAI,EAAK2B,SAAL,2BAAmB,EAAK5B,OAAxB,IAA+ByB,KAAMxB,QAC5EI,KAAKlB,OAAOmB,GAAG,eAAe,SAAAC,GAC1B,EAAKqB,SAAL,2BAAmB,EAAK5B,OAAxB,IAA+BsB,SAAS,GAAD,mBAAM,EAAKtB,MAAMsB,UAAjB,CAA2Bf,OAAS,WACvE,EAAKsB,sB,oBAIjB,WAAU,IAAD,OACL,OACI,qBAAKnB,UAAW,iBAAhB,SACI,sBAAKA,UAAW,eAAhB,UACI,sBAAKA,UAAW,cAAhB,UACI,6BAAKL,KAAKL,MAAMuB,KAAKoB,OAEG,KAApBtC,KAAKL,MAAMyB,KACP,qBAAIf,UAAW,cAAf,UAA8B,sBAAMA,UAAW,YAA/C,6BAEA,uCAAUL,KAAKL,MAAMyB,WAGjC,qBACIE,GAAI,mBACJjB,UAAW,mBACXkC,SAAU,SAAAb,GAAC,OAAI,EAAKD,YAAYC,IAHpC,SAMQ1B,KAAKL,MAAMsB,SAASuB,KAAI,SAACxB,EAASyB,GAAV,OACpB,oBAAGpC,UAAW,UAAWiB,GAAI,WAAamB,EAA1C,UAAiD,4BAAIzB,EAAQpB,WAA7D,IAA4EoB,EAAQA,gBAIhG,uBAAMX,UAAW,cAAeG,SAAU,SAAAf,GAAK,OAAI,EAAK4B,YAAY5B,IAApE,UACI,uBACIgB,KAAM,OACNC,SAAU,SAAAjB,GAAK,OAAI,EAAKuB,QAAQvB,EAAMkB,OAAOC,QAC7CC,YAAa,kBACbD,MAAOZ,KAAKL,MAAMqB,UAEtB,sD,GAzFLF,aCGb4B,E,4MAEF/C,MAAQ,CACJgD,OAAQ,OACR/C,SAAU,I,EAGdN,YAAc,SAACsD,EAAOhC,GAAR,OAAkB,EAAKW,SAAL,2BAAmB,EAAK5B,OAAxB,kBAAgCiD,EAAQhC,M,4CAExE,WACI,MAA0B,SAAtBZ,KAAKL,MAAMgD,OACJ,cAAC,EAAD,CAAMhD,MAAOK,KAAKL,MAAOL,YAAaU,KAAKV,YAAaR,OAAQkB,KAAK6C,UAEtD,SAAtB7C,KAAKL,MAAMgD,OACJ,cAAC,EAAD,CAAMhD,MAAOK,KAAKL,MAAOL,YAAaU,KAAKV,YAAaR,OAAQkB,KAAK6C,eADhF,M,GAbU/B,aAAZ4B,EACKI,YAAc5D,EAkBVwD,QCpBfK,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC/D,EAAcgE,SAAf,CAAwBtC,MAAO9B,EAA/B,SACI,cAAC,EAAD,QAGRkD,SAASmB,eAAe,W","file":"static/js/main.38082de3.chunk.js","sourcesContent":["import React from 'react'\nimport socketio from 'socket.io-client'\nimport { SOCKET_URL } from '../config'\n\nexport const socket = socketio.connect(SOCKET_URL, { transports: [\"websocket\"] })\nexport const SocketContext = React.createContext()","export const SOCKET_URL = 'https://omgui.herokuapp.com'","import React, { Component } from 'react'\n\nclass CreateNickname extends Component {\n    updateState = this.props.updateState\n    socket = this.props.socket\n\n    sendNickname = event => {\n        event.preventDefault()\n        if (this.props.state.nickname.trim().length > 0) {\n            this.socket.emit('nickname', this.props.state.nickname)\n        }\n    }\n\n    componentDidMount() {\n        this.socket.on('nickname-response', data => {\n            if (data.success) {\n                this.updateState('screen', 'chat')\n            } else {\n                alert('Nickname already exists!')\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div className={'center-absolute'}>\n                <div className={'card card-body w-420'}>\n                    <h2 style={{marginBottom: '20px'}}>Create nickname</h2>\n                    <form className={'form'} onSubmit={event => this.sendNickname(event)}>\n                        <input\n                            type={'text'}\n                            onChange={event => this.updateState('nickname', event.target.value)}\n                            placeholder={'Enter your nickname'}\n                        />\n                        <button>Send</button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CreateNickname","import React, { Component } from 'react'\n\n\n\nclass Chat extends Component {\n    state = {\n        message: '',\n        messages: [],\n        room: {},\n        scrolled: false,\n        mate: ''\n    }\n    updateState = this.props.updateState\n    socket = this.props.socket\n\n    sendMessage = event => {\n        event.preventDefault()\n        if (this.state.message.trim().length > 0) {\n            const data = {\n                room: this.state.room.id,\n                nickname: this.props.state.nickname,\n                message: this.state.message\n            }\n            this.socket.emit('new-message', data)\n            this.setState({ ...this.state, message: '', messages: [...this.state.messages, data] }, () => {\n                this.scrollToEnd()\n            })\n        }\n    }\n    checkScroll = (e) => {\n        let content = e.target,\n            top = content.scrollTop,\n            height = content.scrollHeight - content.clientHeight\n        if (height-top > 20) {\n            this.setState({ ...this.state, scrolled: true })\n        } else {\n            this.setState({ ...this.state, scrolled: false })\n        }\n    }\n    scrollToEnd = () => {\n        if (!this.state.scrolled) {\n            document.querySelector('#message-recipent').scrollTo(0, document.querySelector('#message-recipent').scrollHeight)\n        }\n    }\n    message = message => this.setState({ ...this.state, message })\n    componentDidMount() {\n        this.socket.emit('find-room', this.props.state.nickname)\n        this.socket.on('find-room-response', data => {\n            this.setState({ ...this.state, room: data })\n            data.participants.forEach(participant => {\n                if (this.props.state.nickname !== participant) {\n                    this.setState({ ...this.state, mate: participant })\n                }\n            })\n        })\n        this.socket.on('new-mate', nickname => this.setState({ ...this.state, mate: nickname }))\n        this.socket.on('new-message', data => {\n            this.setState({ ...this.state, messages: [...this.state.messages, data] }, () => {\n                this.scrollToEnd()\n            })\n        })\n    }\n    render() {\n        return (\n            <div className={'chat-container'}>\n                <div className={'chat-content'}>\n                    <div className={'chat-header'}>\n                        <h1>{this.state.room.name}</h1>\n                        {\n                            this.state.mate === '' ?\n                                <h4 className={'chat-status'}><span className={'spinner'}></span> Waiting for someone...</h4>\n                                :\n                                <h4>With {this.state.mate}</h4>\n                        }\n                    </div>\n                    <div\n                        id={'message-recipent'}\n                        className={'message-recipent'}\n                        onScroll={e => this.checkScroll(e)}\n                    >\n                        {\n                            this.state.messages.map((message, index) => (\n                                <p className={'message'} id={'message-' + index}><b>{message.nickname}</b> {message.message}</p>\n                            ))\n                        }\n                    </div>\n                    <form className={'message-box'} onSubmit={event => this.sendMessage(event)}>\n                        <input\n                            type={'text'}\n                            onChange={event => this.message(event.target.value)}\n                            placeholder={'Write something'}\n                            value={this.state.message}\n                        />\n                        <button>Send</button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Chat","import React, { Component } from 'react'\n\nimport { SocketContext } from './context/socket'\n\nimport Main from './screens/create-nick'\nimport Chat from './screens/chat'\n\nclass App extends Component {\n    static contextType = SocketContext\n    state = {\n        screen: 'main',\n        nickname: '',\n    }\n\n    updateState = (field, value) => this.setState({ ...this.state, [field]: value })\n\n    render() {\n        if (this.state.screen === 'main') {\n            return <Main state={this.state} updateState={this.updateState} socket={this.context} />\n        }\n        if (this.state.screen === 'chat') {\n            return <Chat state={this.state} updateState={this.updateState} socket={this.context} />\n        }\n    }\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport { socket, SocketContext } from './context/socket'\n\nReactDOM.render(\n    <React.StrictMode>\n        <SocketContext.Provider value={socket}>\n            <App />\n        </SocketContext.Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)"],"sourceRoot":""}